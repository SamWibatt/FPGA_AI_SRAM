DEVICE-upduino ?= up5k
FOOTPRINT-upduino ?= sg48
PIN_SRC-upduino ?= upduino_v2.pcf

DEVICE-icebreaker ?= up5k
FOOTPRINT-icebreaker ?= sg48
PIN_SRC-icebreaker ?= icebreaker.pcf


DEVICE-tinyfpga := lp8k
FOOTPRINT-tinyfpga := cm81
PIN_SRC-tinyfpga := tinyfpga-bx.pcf

DEVICE-tomu := up5k
FOOTPRINT-tomu := uwg30
PIN_SRC-tomu := tomu.pcf

USB_DEV ?= 1-1:1.0
BOARD ?= upduino
DEVICE := $(DEVICE-$(BOARD))
FOOTPRINT := $(FOOTPRINT-$(BOARD))
PIN_SRC := $(PIN_SRC-$(BOARD))


PNR ?= $(ICEPATH)nextpnr-ice40
.SECONDARY:

%.flash: %.bin
	$(ICEPATH)iceprog -e 128 # Force a reset
	$(ICEPATH)iceprog $<
	echo $(USB_DEV) | tee /sys/bus/usb/drivers/ftdi_sio/bind

%.bin: %.asc
	$(ICEPATH)icepack $< $@

%.json: %.v
	$(ICEPATH)yosys \
		-q \
		-p 'read_verilog $<' \
		-p 'synth_ice40 -top top -json $@' \
		-E .$(basename $@).d \

%.asc: $(PIN_SRC) %.json
	$(PNR) \
		--$(DEVICE) \
		--package $(FOOTPRINT) \
		--asc $@ \
		--pcf $(PIN_SRC) \
		--json $(basename $@).json \

%.gui: %.json
	$(PNR) --gui --$(DEVICE) --pcf $(PIN_SRC) --json $<

%.bin: %.asc
	$(ICEPATH)icepack $^ $@

# Generate a desired MHz pll
pll_%.v:
	$(ICEPATH)icepll \
		-i 48 \
		-o $(subst pll_,,$(basename $@)) \
		-m \
		-n $(basename $@) \
		-f $@


# sean comments this out until he understands makefiles which will probably be never
# define make-test =
# $1: $1.vvp
# 	vvp $$<
# endef
#
# test: $(TEST-y)
# $(foreach t,$(TEST-y),$(eval $(call make-test,$t)))
# %.vvp:
# 	iverilog -o $@ -s $(basename $@) $^

# so ok, I give a test target in the Makefile that looks like
# test: top_test.vcd or something

# here is how I've done this in my shell scripts
# iverilog -D SIM_STEP -o hd44780_bytesend_tb.vvp hd44780_bytesender.v hd44780_nybsen.v hd44780_bytesend_tb.v hd44780_syscon.v 1>> sim_tb_out.txt 2>> sim_tb_err.txt
# vvp hd44780_bytesend_tb.vvp  1>> sim_tb_out.txt 2>> sim_tb_err.txt
##gtkwave -o does optimization of vcd to FST format, good for the big sims
## or just do it here
#vcd2fst hd44780_bytesend_tb.vcd hd44780_bytesend_tb.fst
#rm -f hd44780_bytesend_tb.vcd

# so let's use an iverilog command file, a la https://iverilog.fandom.com/wiki/Command_File_Format
# I don't see anything in there about an extension you're supposed to use, so I will use .icmd.
# if there's a dumpvars in the testbench source, I don't think I need to do the vvp part? or do I?
# THE PROBLEM WITH THIS IS THAT THE DEPENDENCY DIRECTLY ON .V FILES IS BROKEN! so if you change your .v
# you have to run make clean and then make test. :P well, getting there 
%.vvp: %.icmd
	iverilog -o $@ -f $<

%.vcd: %.vvp
	vvp $<

%.fst: %.vcd
	vcd2fst $< $@

clean:
	$(RM) *.blif *.asc *.bin *.json .*.d *.vcd *.vvp *.fst

-include .*.d
